// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/wilsonce/connectly-test/model"
)

func newWMessage(db *gorm.DB, opts ...gen.DOOption) wMessage {
	_wMessage := wMessage{}

	_wMessage.wMessageDo.UseDB(db, opts...)
	_wMessage.wMessageDo.UseModel(&model.WMessage{})

	tableName := _wMessage.wMessageDo.TableName()
	_wMessage.ALL = field.NewAsterisk(tableName)
	_wMessage.ID = field.NewInt32(tableName, "id")
	_wMessage.Messaage = field.NewString(tableName, "messaage")
	_wMessage.FromUsername = field.NewString(tableName, "from_username")
	_wMessage.BotName = field.NewString(tableName, "bot_name")
	_wMessage.FromFirstName = field.NewString(tableName, "from_first_name")
	_wMessage.FromLastName = field.NewString(tableName, "from_last_name")
	_wMessage.CreatedAt = field.NewString(tableName, "created_at")
	_wMessage.ChatID = field.NewInt64(tableName, "chat_id")

	_wMessage.fillFieldMap()

	return _wMessage
}

type wMessage struct {
	wMessageDo wMessageDo

	ALL           field.Asterisk
	ID            field.Int32
	Messaage      field.String
	FromUsername  field.String
	BotName       field.String
	FromFirstName field.String
	FromLastName  field.String
	CreatedAt     field.String
	ChatID        field.Int64

	fieldMap map[string]field.Expr
}

func (w wMessage) Table(newTableName string) *wMessage {
	w.wMessageDo.UseTable(newTableName)
	return w.updateTableName(newTableName)
}

func (w wMessage) As(alias string) *wMessage {
	w.wMessageDo.DO = *(w.wMessageDo.As(alias).(*gen.DO))
	return w.updateTableName(alias)
}

func (w *wMessage) updateTableName(table string) *wMessage {
	w.ALL = field.NewAsterisk(table)
	w.ID = field.NewInt32(table, "id")
	w.Messaage = field.NewString(table, "messaage")
	w.FromUsername = field.NewString(table, "from_username")
	w.BotName = field.NewString(table, "bot_name")
	w.FromFirstName = field.NewString(table, "from_first_name")
	w.FromLastName = field.NewString(table, "from_last_name")
	w.CreatedAt = field.NewString(table, "created_at")
	w.ChatID = field.NewInt64(table, "chat_id")

	w.fillFieldMap()

	return w
}

func (w *wMessage) WithContext(ctx context.Context) IWMessageDo { return w.wMessageDo.WithContext(ctx) }

func (w wMessage) TableName() string { return w.wMessageDo.TableName() }

func (w wMessage) Alias() string { return w.wMessageDo.Alias() }

func (w wMessage) Columns(cols ...field.Expr) gen.Columns { return w.wMessageDo.Columns(cols...) }

func (w *wMessage) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := w.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (w *wMessage) fillFieldMap() {
	w.fieldMap = make(map[string]field.Expr, 8)
	w.fieldMap["id"] = w.ID
	w.fieldMap["messaage"] = w.Messaage
	w.fieldMap["from_username"] = w.FromUsername
	w.fieldMap["bot_name"] = w.BotName
	w.fieldMap["from_first_name"] = w.FromFirstName
	w.fieldMap["from_last_name"] = w.FromLastName
	w.fieldMap["created_at"] = w.CreatedAt
	w.fieldMap["chat_id"] = w.ChatID
}

func (w wMessage) clone(db *gorm.DB) wMessage {
	w.wMessageDo.ReplaceConnPool(db.Statement.ConnPool)
	return w
}

func (w wMessage) replaceDB(db *gorm.DB) wMessage {
	w.wMessageDo.ReplaceDB(db)
	return w
}

type wMessageDo struct{ gen.DO }

type IWMessageDo interface {
	gen.SubQuery
	Debug() IWMessageDo
	WithContext(ctx context.Context) IWMessageDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IWMessageDo
	WriteDB() IWMessageDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IWMessageDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IWMessageDo
	Not(conds ...gen.Condition) IWMessageDo
	Or(conds ...gen.Condition) IWMessageDo
	Select(conds ...field.Expr) IWMessageDo
	Where(conds ...gen.Condition) IWMessageDo
	Order(conds ...field.Expr) IWMessageDo
	Distinct(cols ...field.Expr) IWMessageDo
	Omit(cols ...field.Expr) IWMessageDo
	Join(table schema.Tabler, on ...field.Expr) IWMessageDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IWMessageDo
	RightJoin(table schema.Tabler, on ...field.Expr) IWMessageDo
	Group(cols ...field.Expr) IWMessageDo
	Having(conds ...gen.Condition) IWMessageDo
	Limit(limit int) IWMessageDo
	Offset(offset int) IWMessageDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IWMessageDo
	Unscoped() IWMessageDo
	Create(values ...*model.WMessage) error
	CreateInBatches(values []*model.WMessage, batchSize int) error
	Save(values ...*model.WMessage) error
	First() (*model.WMessage, error)
	Take() (*model.WMessage, error)
	Last() (*model.WMessage, error)
	Find() ([]*model.WMessage, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.WMessage, err error)
	FindInBatches(result *[]*model.WMessage, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.WMessage) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IWMessageDo
	Assign(attrs ...field.AssignExpr) IWMessageDo
	Joins(fields ...field.RelationField) IWMessageDo
	Preload(fields ...field.RelationField) IWMessageDo
	FirstOrInit() (*model.WMessage, error)
	FirstOrCreate() (*model.WMessage, error)
	FindByPage(offset int, limit int) (result []*model.WMessage, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IWMessageDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (w wMessageDo) Debug() IWMessageDo {
	return w.withDO(w.DO.Debug())
}

func (w wMessageDo) WithContext(ctx context.Context) IWMessageDo {
	return w.withDO(w.DO.WithContext(ctx))
}

func (w wMessageDo) ReadDB() IWMessageDo {
	return w.Clauses(dbresolver.Read)
}

func (w wMessageDo) WriteDB() IWMessageDo {
	return w.Clauses(dbresolver.Write)
}

func (w wMessageDo) Session(config *gorm.Session) IWMessageDo {
	return w.withDO(w.DO.Session(config))
}

func (w wMessageDo) Clauses(conds ...clause.Expression) IWMessageDo {
	return w.withDO(w.DO.Clauses(conds...))
}

func (w wMessageDo) Returning(value interface{}, columns ...string) IWMessageDo {
	return w.withDO(w.DO.Returning(value, columns...))
}

func (w wMessageDo) Not(conds ...gen.Condition) IWMessageDo {
	return w.withDO(w.DO.Not(conds...))
}

func (w wMessageDo) Or(conds ...gen.Condition) IWMessageDo {
	return w.withDO(w.DO.Or(conds...))
}

func (w wMessageDo) Select(conds ...field.Expr) IWMessageDo {
	return w.withDO(w.DO.Select(conds...))
}

func (w wMessageDo) Where(conds ...gen.Condition) IWMessageDo {
	return w.withDO(w.DO.Where(conds...))
}

func (w wMessageDo) Order(conds ...field.Expr) IWMessageDo {
	return w.withDO(w.DO.Order(conds...))
}

func (w wMessageDo) Distinct(cols ...field.Expr) IWMessageDo {
	return w.withDO(w.DO.Distinct(cols...))
}

func (w wMessageDo) Omit(cols ...field.Expr) IWMessageDo {
	return w.withDO(w.DO.Omit(cols...))
}

func (w wMessageDo) Join(table schema.Tabler, on ...field.Expr) IWMessageDo {
	return w.withDO(w.DO.Join(table, on...))
}

func (w wMessageDo) LeftJoin(table schema.Tabler, on ...field.Expr) IWMessageDo {
	return w.withDO(w.DO.LeftJoin(table, on...))
}

func (w wMessageDo) RightJoin(table schema.Tabler, on ...field.Expr) IWMessageDo {
	return w.withDO(w.DO.RightJoin(table, on...))
}

func (w wMessageDo) Group(cols ...field.Expr) IWMessageDo {
	return w.withDO(w.DO.Group(cols...))
}

func (w wMessageDo) Having(conds ...gen.Condition) IWMessageDo {
	return w.withDO(w.DO.Having(conds...))
}

func (w wMessageDo) Limit(limit int) IWMessageDo {
	return w.withDO(w.DO.Limit(limit))
}

func (w wMessageDo) Offset(offset int) IWMessageDo {
	return w.withDO(w.DO.Offset(offset))
}

func (w wMessageDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IWMessageDo {
	return w.withDO(w.DO.Scopes(funcs...))
}

func (w wMessageDo) Unscoped() IWMessageDo {
	return w.withDO(w.DO.Unscoped())
}

func (w wMessageDo) Create(values ...*model.WMessage) error {
	if len(values) == 0 {
		return nil
	}
	return w.DO.Create(values)
}

func (w wMessageDo) CreateInBatches(values []*model.WMessage, batchSize int) error {
	return w.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (w wMessageDo) Save(values ...*model.WMessage) error {
	if len(values) == 0 {
		return nil
	}
	return w.DO.Save(values)
}

func (w wMessageDo) First() (*model.WMessage, error) {
	if result, err := w.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.WMessage), nil
	}
}

func (w wMessageDo) Take() (*model.WMessage, error) {
	if result, err := w.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.WMessage), nil
	}
}

func (w wMessageDo) Last() (*model.WMessage, error) {
	if result, err := w.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.WMessage), nil
	}
}

func (w wMessageDo) Find() ([]*model.WMessage, error) {
	result, err := w.DO.Find()
	return result.([]*model.WMessage), err
}

func (w wMessageDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.WMessage, err error) {
	buf := make([]*model.WMessage, 0, batchSize)
	err = w.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (w wMessageDo) FindInBatches(result *[]*model.WMessage, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return w.DO.FindInBatches(result, batchSize, fc)
}

func (w wMessageDo) Attrs(attrs ...field.AssignExpr) IWMessageDo {
	return w.withDO(w.DO.Attrs(attrs...))
}

func (w wMessageDo) Assign(attrs ...field.AssignExpr) IWMessageDo {
	return w.withDO(w.DO.Assign(attrs...))
}

func (w wMessageDo) Joins(fields ...field.RelationField) IWMessageDo {
	for _, _f := range fields {
		w = *w.withDO(w.DO.Joins(_f))
	}
	return &w
}

func (w wMessageDo) Preload(fields ...field.RelationField) IWMessageDo {
	for _, _f := range fields {
		w = *w.withDO(w.DO.Preload(_f))
	}
	return &w
}

func (w wMessageDo) FirstOrInit() (*model.WMessage, error) {
	if result, err := w.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.WMessage), nil
	}
}

func (w wMessageDo) FirstOrCreate() (*model.WMessage, error) {
	if result, err := w.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.WMessage), nil
	}
}

func (w wMessageDo) FindByPage(offset int, limit int) (result []*model.WMessage, count int64, err error) {
	result, err = w.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = w.Offset(-1).Limit(-1).Count()
	return
}

func (w wMessageDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = w.Count()
	if err != nil {
		return
	}

	err = w.Offset(offset).Limit(limit).Scan(result)
	return
}

func (w wMessageDo) Scan(result interface{}) (err error) {
	return w.DO.Scan(result)
}

func (w wMessageDo) Delete(models ...*model.WMessage) (result gen.ResultInfo, err error) {
	return w.DO.Delete(models)
}

func (w *wMessageDo) withDO(do gen.Dao) *wMessageDo {
	w.DO = *do.(*gen.DO)
	return w
}
