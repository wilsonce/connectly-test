// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/wilsonce/connectly-test/model"
)

func newWBot(db *gorm.DB, opts ...gen.DOOption) wBot {
	_wBot := wBot{}

	_wBot.wBotDo.UseDB(db, opts...)
	_wBot.wBotDo.UseModel(&model.WBot{})

	tableName := _wBot.wBotDo.TableName()
	_wBot.ALL = field.NewAsterisk(tableName)
	_wBot.ID = field.NewInt32(tableName, "id ")
	_wBot.BotName = field.NewString(tableName, "bot_name")
	_wBot.BotToken = field.NewString(tableName, "bot_token")
	_wBot.CreatedAt = field.NewString(tableName, "created_at")
	_wBot.UpdatedAt = field.NewString(tableName, "updated_at")

	_wBot.fillFieldMap()

	return _wBot
}

type wBot struct {
	wBotDo wBotDo

	ALL       field.Asterisk
	ID        field.Int32
	BotName   field.String
	BotToken  field.String
	CreatedAt field.String
	UpdatedAt field.String

	fieldMap map[string]field.Expr
}

func (w wBot) Table(newTableName string) *wBot {
	w.wBotDo.UseTable(newTableName)
	return w.updateTableName(newTableName)
}

func (w wBot) As(alias string) *wBot {
	w.wBotDo.DO = *(w.wBotDo.As(alias).(*gen.DO))
	return w.updateTableName(alias)
}

func (w *wBot) updateTableName(table string) *wBot {
	w.ALL = field.NewAsterisk(table)
	w.ID = field.NewInt32(table, "id ")
	w.BotName = field.NewString(table, "bot_name")
	w.BotToken = field.NewString(table, "bot_token")
	w.CreatedAt = field.NewString(table, "created_at")
	w.UpdatedAt = field.NewString(table, "updated_at")

	w.fillFieldMap()

	return w
}

func (w *wBot) WithContext(ctx context.Context) IWBotDo { return w.wBotDo.WithContext(ctx) }

func (w wBot) TableName() string { return w.wBotDo.TableName() }

func (w wBot) Alias() string { return w.wBotDo.Alias() }

func (w wBot) Columns(cols ...field.Expr) gen.Columns { return w.wBotDo.Columns(cols...) }

func (w *wBot) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := w.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (w *wBot) fillFieldMap() {
	w.fieldMap = make(map[string]field.Expr, 5)
	w.fieldMap["id "] = w.ID
	w.fieldMap["bot_name"] = w.BotName
	w.fieldMap["bot_token"] = w.BotToken
	w.fieldMap["created_at"] = w.CreatedAt
	w.fieldMap["updated_at"] = w.UpdatedAt
}

func (w wBot) clone(db *gorm.DB) wBot {
	w.wBotDo.ReplaceConnPool(db.Statement.ConnPool)
	return w
}

func (w wBot) replaceDB(db *gorm.DB) wBot {
	w.wBotDo.ReplaceDB(db)
	return w
}

type wBotDo struct{ gen.DO }

type IWBotDo interface {
	gen.SubQuery
	Debug() IWBotDo
	WithContext(ctx context.Context) IWBotDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IWBotDo
	WriteDB() IWBotDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IWBotDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IWBotDo
	Not(conds ...gen.Condition) IWBotDo
	Or(conds ...gen.Condition) IWBotDo
	Select(conds ...field.Expr) IWBotDo
	Where(conds ...gen.Condition) IWBotDo
	Order(conds ...field.Expr) IWBotDo
	Distinct(cols ...field.Expr) IWBotDo
	Omit(cols ...field.Expr) IWBotDo
	Join(table schema.Tabler, on ...field.Expr) IWBotDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IWBotDo
	RightJoin(table schema.Tabler, on ...field.Expr) IWBotDo
	Group(cols ...field.Expr) IWBotDo
	Having(conds ...gen.Condition) IWBotDo
	Limit(limit int) IWBotDo
	Offset(offset int) IWBotDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IWBotDo
	Unscoped() IWBotDo
	Create(values ...*model.WBot) error
	CreateInBatches(values []*model.WBot, batchSize int) error
	Save(values ...*model.WBot) error
	First() (*model.WBot, error)
	Take() (*model.WBot, error)
	Last() (*model.WBot, error)
	Find() ([]*model.WBot, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.WBot, err error)
	FindInBatches(result *[]*model.WBot, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.WBot) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IWBotDo
	Assign(attrs ...field.AssignExpr) IWBotDo
	Joins(fields ...field.RelationField) IWBotDo
	Preload(fields ...field.RelationField) IWBotDo
	FirstOrInit() (*model.WBot, error)
	FirstOrCreate() (*model.WBot, error)
	FindByPage(offset int, limit int) (result []*model.WBot, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IWBotDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (w wBotDo) Debug() IWBotDo {
	return w.withDO(w.DO.Debug())
}

func (w wBotDo) WithContext(ctx context.Context) IWBotDo {
	return w.withDO(w.DO.WithContext(ctx))
}

func (w wBotDo) ReadDB() IWBotDo {
	return w.Clauses(dbresolver.Read)
}

func (w wBotDo) WriteDB() IWBotDo {
	return w.Clauses(dbresolver.Write)
}

func (w wBotDo) Session(config *gorm.Session) IWBotDo {
	return w.withDO(w.DO.Session(config))
}

func (w wBotDo) Clauses(conds ...clause.Expression) IWBotDo {
	return w.withDO(w.DO.Clauses(conds...))
}

func (w wBotDo) Returning(value interface{}, columns ...string) IWBotDo {
	return w.withDO(w.DO.Returning(value, columns...))
}

func (w wBotDo) Not(conds ...gen.Condition) IWBotDo {
	return w.withDO(w.DO.Not(conds...))
}

func (w wBotDo) Or(conds ...gen.Condition) IWBotDo {
	return w.withDO(w.DO.Or(conds...))
}

func (w wBotDo) Select(conds ...field.Expr) IWBotDo {
	return w.withDO(w.DO.Select(conds...))
}

func (w wBotDo) Where(conds ...gen.Condition) IWBotDo {
	return w.withDO(w.DO.Where(conds...))
}

func (w wBotDo) Order(conds ...field.Expr) IWBotDo {
	return w.withDO(w.DO.Order(conds...))
}

func (w wBotDo) Distinct(cols ...field.Expr) IWBotDo {
	return w.withDO(w.DO.Distinct(cols...))
}

func (w wBotDo) Omit(cols ...field.Expr) IWBotDo {
	return w.withDO(w.DO.Omit(cols...))
}

func (w wBotDo) Join(table schema.Tabler, on ...field.Expr) IWBotDo {
	return w.withDO(w.DO.Join(table, on...))
}

func (w wBotDo) LeftJoin(table schema.Tabler, on ...field.Expr) IWBotDo {
	return w.withDO(w.DO.LeftJoin(table, on...))
}

func (w wBotDo) RightJoin(table schema.Tabler, on ...field.Expr) IWBotDo {
	return w.withDO(w.DO.RightJoin(table, on...))
}

func (w wBotDo) Group(cols ...field.Expr) IWBotDo {
	return w.withDO(w.DO.Group(cols...))
}

func (w wBotDo) Having(conds ...gen.Condition) IWBotDo {
	return w.withDO(w.DO.Having(conds...))
}

func (w wBotDo) Limit(limit int) IWBotDo {
	return w.withDO(w.DO.Limit(limit))
}

func (w wBotDo) Offset(offset int) IWBotDo {
	return w.withDO(w.DO.Offset(offset))
}

func (w wBotDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IWBotDo {
	return w.withDO(w.DO.Scopes(funcs...))
}

func (w wBotDo) Unscoped() IWBotDo {
	return w.withDO(w.DO.Unscoped())
}

func (w wBotDo) Create(values ...*model.WBot) error {
	if len(values) == 0 {
		return nil
	}
	return w.DO.Create(values)
}

func (w wBotDo) CreateInBatches(values []*model.WBot, batchSize int) error {
	return w.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (w wBotDo) Save(values ...*model.WBot) error {
	if len(values) == 0 {
		return nil
	}
	return w.DO.Save(values)
}

func (w wBotDo) First() (*model.WBot, error) {
	if result, err := w.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.WBot), nil
	}
}

func (w wBotDo) Take() (*model.WBot, error) {
	if result, err := w.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.WBot), nil
	}
}

func (w wBotDo) Last() (*model.WBot, error) {
	if result, err := w.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.WBot), nil
	}
}

func (w wBotDo) Find() ([]*model.WBot, error) {
	result, err := w.DO.Find()
	return result.([]*model.WBot), err
}

func (w wBotDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.WBot, err error) {
	buf := make([]*model.WBot, 0, batchSize)
	err = w.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (w wBotDo) FindInBatches(result *[]*model.WBot, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return w.DO.FindInBatches(result, batchSize, fc)
}

func (w wBotDo) Attrs(attrs ...field.AssignExpr) IWBotDo {
	return w.withDO(w.DO.Attrs(attrs...))
}

func (w wBotDo) Assign(attrs ...field.AssignExpr) IWBotDo {
	return w.withDO(w.DO.Assign(attrs...))
}

func (w wBotDo) Joins(fields ...field.RelationField) IWBotDo {
	for _, _f := range fields {
		w = *w.withDO(w.DO.Joins(_f))
	}
	return &w
}

func (w wBotDo) Preload(fields ...field.RelationField) IWBotDo {
	for _, _f := range fields {
		w = *w.withDO(w.DO.Preload(_f))
	}
	return &w
}

func (w wBotDo) FirstOrInit() (*model.WBot, error) {
	if result, err := w.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.WBot), nil
	}
}

func (w wBotDo) FirstOrCreate() (*model.WBot, error) {
	if result, err := w.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.WBot), nil
	}
}

func (w wBotDo) FindByPage(offset int, limit int) (result []*model.WBot, count int64, err error) {
	result, err = w.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = w.Offset(-1).Limit(-1).Count()
	return
}

func (w wBotDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = w.Count()
	if err != nil {
		return
	}

	err = w.Offset(offset).Limit(limit).Scan(result)
	return
}

func (w wBotDo) Scan(result interface{}) (err error) {
	return w.DO.Scan(result)
}

func (w wBotDo) Delete(models ...*model.WBot) (result gen.ResultInfo, err error) {
	return w.DO.Delete(models)
}

func (w *wBotDo) withDO(do gen.Dao) *wBotDo {
	w.DO = *do.(*gen.DO)
	return w
}
